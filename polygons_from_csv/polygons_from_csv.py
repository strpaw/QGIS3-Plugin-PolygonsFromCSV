# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PolygonsFromCSV
                                 A QGIS plugin
 Creates polygons from data in csv file
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-06
        git sha              : $Format:%H$
        copyright            : (C) 2020 by PaweÅ‚ Srzelewicz
        email                : @
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QWidget, QMessageBox
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .polygons_from_csv_dialog import PolygonsFromCSVDialog
import os.path
import csv
from .aviation_gis_toolkit.coordinate import *
from datetime import datetime


class PolygonsFromCSV:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.csv_fields = None
        self.output_layer = None
        self.import_log_path = None
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PolygonsFromCSV_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&PolygonsFromCSV')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PolygonsFromCSV', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/polygons_from_csv/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'PolygonsFromCSV'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&PolygonsFromCSV'),
                action)
            self.iface.removeToolBarIcon(action)

    def set_import_log_path(self, input_csv_base_name):
        """ Set full path to import log file.
        :param input_csv_base_name:
        """
        directory = os.path.dirname(os.path.realpath(__file__))
        self.import_log_path = os.path.join(directory, "{}_import.log".format(input_csv_base_name))

    def log_message(self, message):
        """ Append message to import log file.
        :param message: str, message to log
        """
        with open(self.import_log_path, 'a') as f:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
            f.write("{} | {}".format(timestamp, message))

    def remove_csv_fields_assignment(self):
        """ Remove CSV fields assigned to drop-down lists. """
        self.dlg.comboBoxFieldPolygonName.clear()
        self.dlg.comboBoxFieldLongitude.clear()
        self.dlg.comboBoxFieldLatitude.clear()

    def init_csv_fields_assignment(self):
        """ Fill in drop-down lists with CSV fields. """
        self.dlg.comboBoxFieldPolygonName.addItems(self.csv_fields)
        self.dlg.comboBoxFieldLongitude.addItems(self.csv_fields)
        self.dlg.comboBoxFieldLatitude.addItems(self.csv_fields)

    def reset_csv_fields_assignment(self):
        """ Read fields from CSV input file and fill drop-down lists with them if there are 3 or more
        fields in CSV file. """
        input_path = self.dlg.mQgsFileWidgetInputFile.filePath()
        if os.path.isfile(input_path):
            with open(input_path, 'r') as file:
                delimiter = self.dlg.comboBoxCSVDelimiter.currentText()
                reader = csv.DictReader(file, delimiter=delimiter)
                header = reader.fieldnames
                fields_count = len(header)
                if fields_count >= 3:
                    self.csv_fields = header
                    self.remove_csv_fields_assignment()
                    self.init_csv_fields_assignment()
                else:
                    self.remove_csv_fields_assignment()
                    self.csv_fields = None
                    QMessageBox.critical(QWidget(), "Message", "At least 3 fields required!")

    def is_input_data_correct(self):
        """ Check if input data file is selected and CSV fields are assigned. """
        input_path = self.dlg.mQgsFileWidgetInputFile.filePath()
        if input_path.strip() == "":
            QMessageBox.critical(QWidget(), "Message", "Select input CSV file!")
        elif os.path.isfile(input_path):
            if self.csv_fields:
                if self.dlg.comboBoxFieldLongitude.currentText() == self.dlg.comboBoxFieldLatitude.currentText():
                    QMessageBox.critical(QWidget(), "Message", "Longitude and latitude fields can not be the same!")
                else:
                    return True
            else:
                QMessageBox.critical(QWidget(), "Message", "At least 3 fields required!")
        else:
            QMessageBox.critical(QWidget(), "Message", "{} is not a file!".format(input_path))

    @staticmethod
    def gen_layer_name():
        """ Generate layer name based on timestamp. """
        timestamp = datetime.now()
        return timestamp.strftime("%Y_%m_%d_%H%M%f")

    def create_output_layer(self, layer_name):
        """ Create output layer with polygons - memory layer. """
        self.output_layer = QgsVectorLayer('Polygon?crs=epsg:4326', layer_name, 'memory')
        provider = self.output_layer.dataProvider()
        self.output_layer.startEditing()
        provider.addAttributes([QgsField("POL_NAME", QVariant.String)])
        self.output_layer.commitChanges()
        QgsProject.instance().addMapLayer(self.output_layer)

    def create_polygon(self, polygon, polygon_name, vertices):
        """ Create and add polygon to output layer.
        :param polygon: QgsFeature(), feature to be created and added to output layer
        :param polygon_name: str
        :param vertices: list, list of QgsPoint - vertices to create shape of polygon
        """
        count_vertices = len(vertices)
        if count_vertices >= 3:
            # At least 3 vertices required to create polygon
            # Check if first and last vertices have the same coordinates
            first_vertex = vertices[0]
            last_vertex = vertices[-1]
            if not first_vertex.compare(last_vertex):
                vertices.append(vertices[0])

            polygon.setAttributes([polygon_name])
            polygon.setGeometry(QgsGeometry.fromPolygonXY([vertices]))
            provider = self.output_layer.dataProvider()
            provider.addFeature(polygon)
            self.output_layer.commitChanges()
            self.log_message("Polygon added to output layer: "
                             "polygon name ({}), vertices count ({}).\n".format(polygon_name, len(vertices)))
        else:
            self.log_message("Not enough vertices: Polygon name: "
                             "({}), vertices count ({}).\n".format(polygon_name, count_vertices))

    def import_polygons_from_csv_file(self):
        """ Read CSV file, create polygons and and them to output layer. """
        input_path = self.dlg.mQgsFileWidgetInputFile.filePath()
        if self.is_input_data_correct():
            with open(input_path, 'r') as input_file:
                input_file_name = os.path.splitext(os.path.basename(input_path))[0]
                self.set_import_log_path(input_file_name)
                self.log_message("Importing polygons from file {} started.\n".format(input_path))

                delimiter = self.dlg.comboBoxCSVDelimiter.currentText()
                reader = csv.DictReader(input_file, delimiter=delimiter)

                layer_name = self.gen_layer_name()
                self.create_output_layer(layer_name)

                current_polygon_name = None
                vertices = []
                polygon = QgsFeature()

                while True:
                    try:
                        row = next(reader)

                        polygon_name = row[self.dlg.comboBoxFieldPolygonName.currentText()]
                        lon_src = row[self.dlg.comboBoxFieldLongitude.currentText()]
                        lat_src = row[self.dlg.comboBoxFieldLatitude.currentText()]
                        
                        lon = Coordinate(lon_src, AT_LONGITUDE)
                        lat = Coordinate(lat_src, AT_LATITUDE)
                        lon_dd = lon.convert_to_dd()
                        lat_dd = lat.convert_to_dd()

                        if lon_dd is not None and lat_dd is not None:
                            vertex = QgsPointXY(lon_dd, lat_dd)
                            if polygon_name == current_polygon_name:
                                vertices.append(vertex)
                            else:
                                self.create_polygon(polygon, current_polygon_name, vertices)
                                current_polygon_name = polygon_name
                                vertices.clear()
                                vertices.append(vertex)
                        else:
                            self.log_message("Coordinate error or coordinate "
                                             "format not supported. Polygon name ({})  "
                                             "longitude: ({}), latitude ({}).\n".format(polygon_name,
                                                                                        lon_src, lat_src))
                    except StopIteration:
                        self.create_polygon(polygon, polygon_name, vertices)
                        break  # Stop iteration

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PolygonsFromCSVDialog()
            self.dlg.pushButtonCreatePolygons.clicked.connect(self.import_polygons_from_csv_file)
            self.dlg.pushButtonCancel.clicked.connect(self.dlg.close)
            self.dlg.comboBoxCSVDelimiter.currentIndexChanged.connect(self.reset_csv_fields_assignment)
            self.dlg.mQgsFileWidgetInputFile.fileChanged.connect(self.reset_csv_fields_assignment)
            self.dlg.mQgsFileWidgetInputFile.setFilter('*.csv')

        # show the dialog
        self.dlg.show()
        self.dlg.mQgsFileWidgetInputFile.lineEdit().clear()
        self.dlg.comboBoxCSVDelimiter.setCurrentIndex(0)
        self.remove_csv_fields_assignment()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
